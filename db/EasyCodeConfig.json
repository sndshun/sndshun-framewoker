{
  "author" : "makejava",
  "version" : "1.2.8",
  "userSecure" : "",
  "currTypeMapperGroupName" : "Default",
  "currTemplateGroupName" : "MybatisPlusFramework",
  "currColumnConfigGroupName" : "Default",
  "currGlobalConfigGroupName" : "Default",
  "typeMapper" : {
    "Default" : {
      "name" : "Default",
      "elementList" : [ {
        "columnType" : "varchar(\\(\\d+\\))?",
        "javaType" : "java.lang.String"
      }, {
        "columnType" : "char(\\(\\d+\\))?",
        "javaType" : "java.lang.String"
      }, {
        "columnType" : "text",
        "javaType" : "java.lang.String"
      }, {
        "columnType" : "decimal(\\(\\d+\\))?",
        "javaType" : "java.math.BigDecimal"
      }, {
        "columnType" : "decimal(\\(\\d+,\\d+\\))?",
        "javaType" : "java.math.BigDecimal"
      }, {
        "columnType" : "integer",
        "javaType" : "java.lang.Integer"
      }, {
        "columnType" : "int(\\(\\d+\\))?",
        "javaType" : "java.lang.Integer"
      }, {
        "columnType" : "int4",
        "javaType" : "java.lang.Integer"
      }, {
        "columnType" : "int8",
        "javaType" : "java.lang.Long"
      }, {
        "columnType" : "bigint(\\(\\d+\\))?",
        "javaType" : "java.lang.Long"
      }, {
        "columnType" : "datetime",
        "javaType" : "java.util.Date"
      }, {
        "columnType" : "timestamp",
        "javaType" : "java.util.Date"
      }, {
        "columnType" : "boolean",
        "javaType" : "java.lang.Boolean"
      }, {
        "columnType" : "double(\\(\\d+,\\d+\\))?",
        "javaType" : "java.lang.Double"
      }, {
        "columnType" : "date",
        "javaType" : "java.util.Date"
      }, {
        "columnType" : "tinyint(\\(\\d+\\))?",
        "javaType" : "java.lang.Integer"
      }, {
        "columnType" : "mediumtext",
        "javaType" : "java.lang.String"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "int unsigned",
        "javaType" : "java.lang.Integer"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "tinyint unsigned",
        "javaType" : "java.lang.Integer"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "varbinary(255)",
        "javaType" : "java.lang.String"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "varbinary(32)",
        "javaType" : "java.lang.String"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "decimal(10,2) unsigned",
        "javaType" : "java.math.BigDecimal"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "double unsigned",
        "javaType" : "java.lang.Double"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "DATETIME(19)",
        "javaType" : "java.util.Date"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "TEXT(65535)",
        "javaType" : "java.lang.String"
      } ]
    }
  },
  "template" : {
    "MybatisPlusFramework" : {
      "name" : "MybatisPlusFramework",
      "elementList" : [ {
        "name" : "entity.vm",
        "code" : "##导入宏定义\n$!define\n\n##使用宏定义设置包后缀\n#setPackageSuffix(\"entity\")\n\n##保存文件（宏定义）\n#save(\"/entity\", \"Entity.java\")\n\n##自动导入包（全局变量）\n$!autoImport\nimport com.baomidou.mybatisplus.extension.activerecord.Model;\nimport com.baomidou.mybatisplus.annotation.TableName;\nimport java.io.Serializable;\nimport lombok.Getter;\nimport lombok.Setter;\n\n##表注释（宏定义）\n#tableComment(\"表实体类\")\n\n@Getter\n@Setter\n@TableName(\"$tool.hump2Underline($!{tableInfo.name})\")\npublic class $!{tableInfo.name}Entity extends Model<$!{tableInfo.name}Entity> {\n#foreach($column in $tableInfo.fullColumn)\n    #if(${column.comment})\n     /**\n     * ${column.comment}\n     */\n    #end\n\n    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};\n#end\n\n##生成无参构造\n##noParameterConstructor($!{tableInfo})\n##生成无主键构造\n##noPkConstructor($!{tableInfo})\n\n}"
      }, {
        "name" : "mapper.vm",
        "code" : "##导入宏定义\n$!define\n\n##定义初始变量\n#set($entity = $tool.append($tableInfo.name, \"Entity\"))\n\n##设置表后缀（宏定义）\n#setTableSuffix(\"Mapper\")\n\n##保存文件（宏定义）\n#save(\"/mapper\", \"Mapper.java\")\n\n##包路径（宏定义）\n#setPackageSuffix(\"mapper\")\n\nimport com.baomidou.mybatisplus.core.mapper.BaseMapper;\nimport $!{tableInfo.savePackageName}.entity.$entity;\nimport org.apache.ibatis.annotations.Mapper;\n\n##表注释（宏定义）\n#tableComment(\"表数据库访问层\")\n@Mapper\npublic interface $!{tableName} extends BaseMapper<$entity> {\n\n}"
      }, {
        "name" : "service.vm",
        "code" : "##导入宏定义\n$!define\n\n##定义初始变量\n#set($entity = $tool.append($tableInfo.name, \"Entity\"))\n\n##设置表后缀（宏定义）\n#setTableSuffix(\"Service\")\n\n##保存文件（宏定义）\n#save(\"/service\", \"Service.java\")\n\n##包路径（宏定义）\n#setPackageSuffix(\"service\")\n\nimport com.baomidou.mybatisplus.extension.service.IService;\nimport $!{tableInfo.savePackageName}.entity.$entity;\n\n##表注释（宏定义）\n#tableComment(\"表服务接口\")\npublic interface $!{tableName} extends IService<$entity> {\n\n}"
      }, {
        "name" : "serviceImpl.vm",
        "code" : "##导入宏定义\n$!define\n##定义初始变量\n#set($entity = $tool.append($tableInfo.name, \"Entity\"))\n\n##设置表后缀（宏定义）\n#setTableSuffix(\"ServiceImpl\")\n\n##保存文件（宏定义）\n#save(\"/service/impl\", \"ServiceImpl.java\")\n\n##包路径（宏定义）\n#setPackageSuffix(\"service.impl\")\n\nimport com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;\nimport $!{tableInfo.savePackageName}.mapper.$!{tableInfo.name}Mapper;\nimport $!{tableInfo.savePackageName}.entity.$entity;\nimport $!{tableInfo.savePackageName}.service.$!{tableInfo.name}Service;\nimport org.springframework.stereotype.Service;\n\n##表注释（宏定义）\n#tableComment(\"表服务实现类\")\n@Service(\"$!tool.firstLowerCase($tableInfo.name)Service\")\npublic class $!{tableName} extends ServiceImpl<$!{tableInfo.name}Mapper, $entity> implements $!{tableInfo.name}Service {\n\n}"
      }, {
        "name" : "controller.vm",
        "code" : "##导入宏定义\n$!define\n\n##定义初始变量\n#set($entity = $tool.append($tableInfo.name, \"Entity\"))\n\n##设置表后缀（宏定义）\n#setTableSuffix(\"Controller\")\n\n##保存文件（宏定义）\n#save(\"/controller\", \"Controller.java\")\n\n##包路径（宏定义）\n#setPackageSuffix(\"controller\")\n\n##定义服务名\n#set($serviceName = $!tool.append($!tool.firstLowerCase($!tableInfo.name), \"Service\"))\n\n##定义实体对象名\n#set($entityName = $!tool.firstLowerCase($!tableInfo.name))\n\nimport com.sndshun.commons.tools.Result;\nimport $!{tableInfo.savePackageName}.entity.$entity;\nimport $!{tableInfo.savePackageName}.service.$!{tableInfo.name}Service;\nimport com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;\nimport com.baomidou.mybatisplus.extension.plugins.pagination.Page;\nimport org.springframework.web.bind.annotation.*;\n\nimport javax.annotation.Resource;\nimport java.io.Serializable;\nimport java.util.List;\n\n##表注释（宏定义）\n#tableComment(\"表控制层\")\n@RestController\n@RequestMapping(\"$!tool.firstLowerCase($!tableInfo.name)\")\npublic class $!{tableName} {\n    /**\n     * 服务对象\n     */\n    @Resource\n    private $!{tableInfo.name}Service $!{serviceName};\n\n    /**\n     * 分页查询所有数据\n     *\n     * @param page 分页对象\n     * @param $!entityName 查询实体\n     * @return 所有数据\n     */\n    @GetMapping\n    public Result<Page<$entity>> selectPage(Page<$entity> page, $entity $!entityName) {\n        return Result.ok(this.$!{serviceName}.page(page, new QueryWrapper<>($!entityName)));\n    }\n\n    /**\n     * 通过主键查询单条数据\n     *\n     * @param id 主键\n     * @return 单条数据\n     */\n    @GetMapping(\"{id}\")\n    public Result<$entity> selectOne(@PathVariable Serializable id) {\n        return Result.ok(this.$!{serviceName}.getById(id));\n    }\n\n    /**\n     * 新增数据\n     *\n     * @param $!entityName 实体对象\n     * @return 新增结果\n     */\n    @PostMapping\n    public Result<Boolean> insert(@RequestBody $entity $!entityName) {\n        return Result.ok(this.$!{serviceName}.save($!entityName));\n    }\n\n    /**\n     * 修改数据\n     *\n     * @param $!entityName 实体对象\n     * @return 修改结果\n     */\n    @PutMapping\n    public Result<Boolean> update(@RequestBody $entity $!entityName) {\n        return Result.ok(this.$!{serviceName}.updateById($!entityName));\n    }\n    \n    /**\n     * 删除数据\n     *\n     * @param id 主键\n     * @return 删除结果\n     */\n    @DeleteMapping(\"/{id}\")\n    public Result<Boolean> delete(@PathVariable Long id) {\n        return Result.ok(this.$!{serviceName}.removeById(id));\n    }\n\n    /**\n     * 删除数据\n     *\n     * @param idList 主键结合\n     * @return 删除结果\n     */\n    @DeleteMapping(\"batch\")\n    public Result<Boolean> deleteBatch(@RequestBody List<Long> idList) {\n        return Result.ok(this.$!{serviceName}.removeByIds(idList));\n    }\n}"
      }, {
        "name" : "mapper.xml.vm",
        "code" : "##引入mybatis支持\n$!mybatisSupport\n\n##设置保存名称与保存位置\n$!callback.setFileName($tool.append($!{tableInfo.name}, \"Mapper.xml\"))\n$!callback.setSavePath($tool.append($modulePath, \"/src/main/resources/mappers\"))\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n<mapper namespace=\"$!{tableInfo.savePackageName}.mapper.$!{tableInfo.name}Mapper\">\n\n    <resultMap type=\"$!{tableInfo.savePackageName}.entity.$!{tableInfo.name}Entity\" id=\"$!{tableInfo.name}Map\">\n#foreach($column in $tableInfo.fullColumn)\n        <result property=\"$!column.name\" column=\"$!column.obj.name\" jdbcType=\"$!column.ext.jdbcType\"/>\n#end\n    </resultMap>\n    \n    <sql id=\"base_column\">\n  \t    #allSqlColumn()\n    </sql>\n\n    <!--用于粘贴复制-->\n    <select id=\"test\" resultMap=\"$!{tableInfo.name}Map\">\n        select\n          #allSqlColumn()\n\n        from $!{tableInfo.obj.parent.name}.$!tableInfo.obj.name\n        <where>\n#foreach($column in $tableInfo.fullColumn)\n            <if test=\"$!column.name != null#if($column.type.equals(\"java.lang.String\")) and $!column.name != ''#end\">\n                and $!column.obj.name = #{$!column.name}\n            </if>\n#end\n        </where>\n    </select>\n\n   \n\n \n\n</mapper>\n"
      }, {
        "name" : "entity.doc.vm",
        "code" : "##导入宏定义\n$!define\n##使用宏定义设置包后缀\n#setPackageSuffix(\"dto\")\n##保存文件（宏定义）\n#save(\"/dto\", \"Dto.java\")\n##自动导入包（全局变量）\n$!autoImport\nimport lombok.Data;\nimport io.swagger.v3.oas.annotations.media.Schema;\n\n##表注释（宏定义）\n#tableComment(\"表实体类\")\n\n@Data\n@Schema(name = \"$tool.hump2Underline($!{tableInfo.name})\", description = \"$!{tableInfo.comment}\")\npublic class $!{tableInfo.name}Dto {\n#foreach($column in $tableInfo.fullColumn)\n    @Schema(name = \"$!{column.name}\", description = \"${column.comment}\")\n    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};\n#end\n\n##生成无参构造\n##noParameterConstructor($!{tableInfo})\n##生成无主键构造\n##noPkConstructor($!{tableInfo})\n\n}"
      }, {
        "name" : "controller.doc.vm",
        "code" : "##导入宏定义\n$!define\n\n##定义初始变量\n#set($entity = $tool.append($tableInfo.name, \"Dto\"))\n\n##设置表后缀（宏定义）\n#setTableSuffix(\"Api\")\n\n##保存文件（宏定义）\n#save(\"/\", \"Api.java\")\n\n##包路径（宏定义）\n#setPackageSuffix()\n\n##定义服务名\n#set($serviceName = $!tool.append($!tool.firstLowerCase($!tableInfo.name), \"Service\"))\n\n##定义实体对象名\n#set($entityName = $!tool.firstLowerCase($!tableInfo.name))\n\nimport $!{tableInfo.savePackageName}.dto.$entity;\nimport com.sndshun.commons.tools.Result;\nimport com.sndshun.web.pojo.QueryPage;\nimport io.swagger.v3.oas.annotations.Operation;\nimport io.swagger.v3.oas.annotations.Parameter;\nimport io.swagger.v3.oas.annotations.enums.ParameterIn;\nimport io.swagger.v3.oas.annotations.parameters.RequestBody;\nimport io.swagger.v3.oas.annotations.responses.ApiResponse;\nimport io.swagger.v3.oas.annotations.responses.ApiResponses;\nimport org.springframework.web.bind.annotation.*;\n\n\nimport java.io.Serializable;\nimport java.util.List;\n\n##表注释（宏定义）\n#tableComment(\"表控制层\")\n@RequestMapping(\"$!tool.firstLowerCase($!tableInfo.name)\")\npublic interface $!{tableName} {\n\n    @Operation(summary = \"分页查询\", description = \"分页查询所有数据\")\n    @ApiResponses(value = {\n            @ApiResponse(responseCode = \"200\", description = \"成功\"),\n    })\n    @GetMapping\n    public Result<?> selectPage(QueryPage page, $entity $!entityName);\n\n    @Operation(summary = \"查询单个\", description = \"通过主键查询单条数据\")\n    @ApiResponses(value = {\n            @ApiResponse(responseCode = \"200\", description = \"成功\"),\n    })\n    @Parameter(name = \"id\",required = true,description = \"id\",in = ParameterIn.PATH)\n    @GetMapping(\"{id}\")\n    public Result<?> selectOne(@PathVariable Serializable id);\n\n    @Operation(summary = \"新增数据\", description = \"\")\n    @ApiResponses(value = {\n            @ApiResponse(responseCode = \"200\", description = \"成功\"),\n    })\n    @PostMapping\n    public Result<Boolean> insert(@RequestBody(description = \"实体\",required = true) $entity $!entityName);\n\n    @Operation(summary = \"修改数据\", description = \"\")\n    @ApiResponses(value = {\n            @ApiResponse(responseCode = \"200\", description = \"成功\"),\n    })\n    @PutMapping\n    public Result<Boolean> update(@RequestBody(description = \"实体\",required = true) $entity $!entityName);\n\n    @Operation(summary = \"删除\", description = \"\")\n    @ApiResponses(value = {\n            @ApiResponse(responseCode = \"200\", description = \"成功\"),\n    })\n    @Parameter(name = \"id\",required = true,description = \"id\",in = ParameterIn.PATH)\n    @DeleteMapping\n    public Result<Boolean> delete(@PathVariable Serializable id);\n    \n    @Operation(summary = \"批量删除\", description = \"\")\n    @ApiResponses(value = {\n            @ApiResponse(responseCode = \"200\", description = \"成功\"),\n    })\n    @DeleteMapping(\"batch\")\n    public Result<Boolean> deleteBatch(@RequestBody(description = \"实体\",required = true) List<Long> idList);\n}"
      } ]
    }
  },
  "columnConfig" : {
    "Default" : {
      "name" : "Default",
      "elementList" : [ {
        "title" : "disable",
        "type" : "BOOLEAN",
        "selectValue" : ""
      }, {
        "title" : "support",
        "type" : "SELECT",
        "selectValue" : "add,edit,query,del,ui"
      } ]
    }
  },
  "globalConfig" : {
    "Default" : {
      "name" : "Default",
      "elementList" : [ {
        "name" : "init",
        "value" : "##初始化区域\n\n##去掉表的t_前缀\n$!tableInfo.setName($tool.getClassName($tableInfo.obj.name.replaceFirst(\"book_\",\"\")))\n\n##参考阿里巴巴开发手册，POJO 类中布尔类型的变量，都不要加 is 前缀，否则部分框架解析会引起序列化错误\n#foreach($column in $tableInfo.fullColumn)\n#if($column.name.startsWith(\"is\") && $column.type.equals(\"java.lang.Boolean\"))\n    $!column.setName($tool.firstLowerCase($column.name.substring(2)))\n#end\n#end\n\n##实现动态排除列\n#set($temp = $tool.newHashSet(\"testCreateTime\", \"otherColumn\"))\n#foreach($item in $temp)\n    #set($newList = $tool.newArrayList())\n    #foreach($column in $tableInfo.fullColumn)\n        #if($column.name!=$item)\n            ##带有反回值的方法调用时使用$tool.call来消除返回值\n            $tool.call($newList.add($column))\n        #end\n    #end\n    ##重新保存\n    $tableInfo.setFullColumn($newList)\n#end\n\n##对importList进行篡改\n#set($temp = $tool.newHashSet())\n#foreach($column in $tableInfo.fullColumn)\n    #if(!$column.type.startsWith(\"java.lang.\"))\n        ##带有反回值的方法调用时使用$tool.call来消除返回值\n        $tool.call($temp.add($column.type))\n    #end\n#end\n##覆盖\n#set($importList = $temp)"
      }, {
        "name" : "define",
        "value" : "##（Velocity宏定义）\n\n##定义设置表名后缀的宏定义，调用方式：#setTableSuffix(\"Test\")\n#macro(setTableSuffix $suffix)\n    #set($tableName = $!tool.append($tableInfo.name, $suffix))\n#end\n\n##定义设置包名后缀的宏定义，调用方式：#setPackageSuffix(\"Test\")\n#macro(setPackageSuffix $suffix)\n#if($suffix!=\"\")package #end#if($tableInfo.savePackageName!=\"\")$!{tableInfo.savePackageName}.#{end}$!suffix;\n#end\n\n##定义直接保存路径与文件名简化的宏定义，调用方式：#save(\"/entity\", \".java\")\n#macro(save $path $fileName)\n    $!callback.setSavePath($tool.append($tableInfo.savePath, $path))\n    $!callback.setFileName($tool.append($tableInfo.name, $fileName))\n#end\n\n##定义表注释的宏定义，调用方式：#tableComment(\"注释信息\")\n#macro(tableComment $desc)\n/**\n * $!{tableInfo.comment}($!{tableInfo.name})$desc\n *\n * @author $!author\n * @since $!time.currTime()\n */\n#end\n\n##定义GET，SET方法的宏定义，调用方式：#getSetMethod($column)\n#macro(getSetMethod $column)\n\n    public $!{tool.getClsNameByFullName($column.type)} get$!{tool.firstUpperCase($column.name)}() {\n        return $!{column.name};\n    }\n\n    public void set$!{tool.firstUpperCase($column.name)}($!{tool.getClsNameByFullName($column.type)} $!{column.name}) {\n        this.$!{column.name} = $!{column.name};\n    }\n#end\n##生成无参构造\n#macro(noParameterConstructor $tableInfo)\n    public $!{tableInfo.name}() {\n    }\n#end\n##生成全参构造\n#macro(AllParameterConstructor $tableInfo)\n    #set($count=$tableInfo.fullColumn.size() - 1)\n     public $!{tableInfo.name}(#foreach($column in $tableInfo.fullColumn)$!{tool.getClsNameByFullName($column.type)} $!{column.name}#if($column.name!=$!{tableInfo.fullColumn.get($count).name}),#end#end){\n       #foreach($column in $tableInfo.fullColumn)\n            this.$!{column.name} = $!{column.name};\n       #end\n    }\n#end\n##生成去主键构造\n#macro(noPkConstructor $tableInfo)\n    #set($count=$tableInfo.otherColumn.size() - 1)\n     public $!{tableInfo.name}(#foreach($column in $tableInfo.otherColumn)$!{tool.getClsNameByFullName($column.type)} $!{column.name}#if($column.name!=$!{tableInfo.otherColumn.get($count).name}),#end#end){\n       #foreach($column in $tableInfo.otherColumn)\n            this.$!{column.name} = $!{column.name};\n       #end\n    }\n#end\n\n"
      }, {
        "name" : "autoImport",
        "value" : "##自动导入包（仅导入实体属性需要的包，通常用于实体类）\n#foreach($import in $importList)\nimport $!import;\n#end"
      }, {
        "name" : "mybatisSupport",
        "value" : "##针对Mybatis 进行支持，主要用于生成xml文件\n#foreach($column in $tableInfo.fullColumn)\n    ##储存列类型\n    $tool.call($column.ext.put(\"sqlType\", $tool.getField($column.obj.dataType, \"typeName\")))\n    #if($tool.newHashSet(\"java.lang.String\").contains($column.type))\n        #set($jdbcType=\"VARCHAR\")\n    #elseif($tool.newHashSet(\"java.lang.Boolean\", \"boolean\").contains($column.type))\n        #set($jdbcType=\"BOOLEAN\")\n    #elseif($tool.newHashSet(\"java.lang.Byte\", \"byte\").contains($column.type))\n        #set($jdbcType=\"BYTE\")\n    #elseif($tool.newHashSet(\"java.lang.Integer\", \"int\", \"java.lang.Short\", \"short\").contains($column.type))\n        #set($jdbcType=\"INTEGER\")\n    #elseif($tool.newHashSet(\"java.lang.Long\", \"long\").contains($column.type))\n        #set($jdbcType=\"INTEGER\")\n    #elseif($tool.newHashSet(\"java.lang.Float\", \"float\", \"java.lang.Double\", \"double\").contains($column.type))\n        #set($jdbcType=\"NUMERIC\")\n    #elseif($tool.newHashSet(\"java.util.Date\", \"java.sql.Timestamp\", \"java.time.Instant\", \"java.time.LocalDateTime\", \"java.time.OffsetDateTime\", \"\tjava.time.ZonedDateTime\").contains($column.type))\n        #set($jdbcType=\"TIMESTAMP\")\n    #elseif($tool.newHashSet(\"java.sql.Date\", \"java.time.LocalDate\").contains($column.type))\n        #set($jdbcType=\"TIMESTAMP\")\n    #else\n        ##其他类型\n        #set($jdbcType=\"OTHER\")\n    #end\n    $tool.call($column.ext.put(\"jdbcType\", $jdbcType))\n#end\n\n##定义宏，查询所有列\n#macro(allSqlColumn)#foreach($column in $tableInfo.fullColumn)$column.obj.name#if($velocityHasNext), #end#end#end"
      }, {
        "name" : "author",
        "value" : "sndshun"
      } ]
    }
  }
}